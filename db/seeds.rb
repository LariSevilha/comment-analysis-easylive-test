# This file should ensure the existence of records required to run the application in every environment (production,
# development, test). The code here should be idempotent so that it can be executed at any point in every environment.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).

puts "üå± Seeding database..."

# Default keywords for comment classification
# These keywords are used to classify comments as approved (>= 2 keywords) or rejected (< 2 keywords)
default_keywords = [
  # Positive sentiment words
  "bom", "boa", "excelente", "√≥timo", "√≥tima", "perfeito", "perfeita",
  "maravilhoso", "maravilhosa", "fant√°stico", "fant√°stica", "incr√≠vel",
  "amor", "amei", "adorei", "gostei", "legal", "bacana", "show",

  # Quality indicators
  "qualidade", "profissional", "eficiente", "r√°pido", "r√°pida",
  "confi√°vel", "seguro", "segura", "recomendo", "recomendado",

  # Engagement words
  "interessante", "√∫til", "importante", "necess√°rio", "necess√°ria",
  "valor", "benef√≠cio", "vantagem", "solu√ß√£o", "resultado",

  # Positive actions
  "funciona", "funcionou", "resolveu", "ajudou", "melhorou",
  "facilitou", "otimizou", "economizou", "ganhou", "conquistou"
]

puts "Creating default keywords..."
created_count = 0
existing_count = 0

# Temporarily disable background job triggers during seeding
original_perform_enqueued_jobs = ActiveJob::Base.queue_adapter.perform_enqueued_jobs rescue nil
ActiveJob::Base.queue_adapter = :test if Rails.env.development?

default_keywords.each do |word|
  keyword = Keyword.find_or_initialize_by(word: word.downcase.strip)
  if keyword.new_record?
    # Skip any callbacks that might trigger background jobs
    keyword.save!
    created_count += 1
    puts "  ‚úì Created keyword: #{word}"
  else
    existing_count += 1
    puts "  - Keyword already exists: #{word}"
  end
end

# Restore original queue adapter
ActiveJob::Base.queue_adapter = :solid_queue if Rails.env.development?

puts "\nüìä Seeding completed!"
puts "  ‚Ä¢ #{created_count} new keywords created"
puts "  ‚Ä¢ #{existing_count} keywords already existed"
puts "  ‚Ä¢ Total keywords in database: #{Keyword.count}"
puts "\nüéØ Keywords are used for comment classification:"
puts "  ‚Ä¢ Comments with >= 2 keywords ‚Üí APPROVED"
puts "  ‚Ä¢ Comments with < 2 keywords ‚Üí REJECTED"

# Manually trigger metrics recalculation if needed (optional)
# if created_count > 0
#   puts "\nüîÑ Triggering metrics recalculation..."
#   begin
#     MetricsRecalculationJob.trigger_keyword_change_recalculation
#     puts "  ‚úì Metrics recalculation job enqueued successfully"
#   rescue => e
#     puts "  ‚ö†Ô∏è  Could not enqueue metrics recalculation job: #{e.message}"
#     puts "  You may need to run this manually later or set up SolidQueue properly"
#   end
# end